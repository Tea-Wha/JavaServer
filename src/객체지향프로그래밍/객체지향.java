package 객체지향프로그래밍;
// 객체지향 프로그래밍 (Object-Oriented Programming)
// 이미 만들어진 것을 다시 만들려고 하지 마라
// 객체지향 -> 클래스를 만드는 것이 중요하다 (하나의 특정 개체를 정의 및 분석 정리해놓는 작업)
// 필드 -> 클래스에 포함된 변수 / 인스턴스 -> 메모리에 할당된 객체 -> 클래스에서 선언된 객체 -> 인스턴스 필드
// 메소드 -> 행동/동작
// 클래스(Class) -> 특정 객체의 속성(변수)과 동작(메소드)을 정의하는 틀 (타이틀)(제목)(하나의 소규모 프로젝트)
// 객체(Object) -> 클래스의 구성요소 -> 속성(변수) / 동작(메소드)
// 객체지향 프로그래밍의 4가지 특징
// 1. 캡슐화 -> 값을 숨기는 것 / 데이터의 무결성과 보안 보장 (내부에 인스턴스 필드를 숨기는 것)
// 2. 상속 -> 회로의 IP와 같은 역할 / 이미 만들어져있는걸 가져와서 사용 / 커스텀(오버라이딩) 가능
// 3. 다형성 ->
// 4. 추상화 ->

// 클래스의 선언 -> public class 클래스이름 {}
// 클래스 변수 = new 클래스(); -> 클래스가 객체화 됨 (new 연산자 -> 생성 (힙 영역 메모리))

// 멤버로 속성을 표현하는 필드(변수) / 기능을 표현하는 메소드

// 메소드의 정의 -> 접근제한자 반환타입 메소드이름(매개변수목록) { // 구현부 // return }
// 접근 제한자 : 해당 메소드에 접근할 수 있는 범위 명시
// 반환 타입 : 메소드가 작업을 마치고 반환하는 데이터의 타입 명시
// 메소드 이름 : 메소드를 호출하기 위한 이름
// 매개변수 목록 : 메소드 호출 시 전달되는 인수의 값을 저장할 변수들을 명시
// 구현부 : 메소드의 고유 기능을 수행하는 명령문의 집합

public class 객체지향 {
}
